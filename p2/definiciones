let true    := /x y.x;;
let false   := /x y.y;;
let if      := /p x y.p x y;;
let not     := /x.if x false true;;
let and     := /x y.if x y false;;
let or      := /x y.if x true y;;
let cero    := /f x.x;;
let uno     := /f x.f x;;
let suma    := /m n f x.m f (n f x);;
let mult    := /m n f x.m (n f) x;;
let suc     := /n f x.f (n f x);;
let es_cero := /n.n (/x.false) true;;
let par     := /x y f.f x y;;
let primero := /p.p true;;
let segundo := /p.p false;;
let nil     := par true true;;
let cons    := /x y.par false (par x y);;
let hd      := /z.primero (segundo z);;
let tl      := /z.segundo (segundo z);;
let es_nil  := primero;;
let exp     := /m n f x.n m f x;;
let prefn   := /f p.par (f (primero p)) (primero p);;
let pred    := /n f x.segundo (n (prefn f) (par x x));;
let sub     := /m n.n pred m;;
let main1   := if true true false;;
let main2   := if false true false;;
let main3   := if true false true;;
let main4   := if false false true;;
let main5   := not true;;
let main6   := not false;;
let main7   := and true false;;
let main8   := and false true;;
let main9   := and true true;;
let main10  := and false false;;
let main11  := or true false;;
let main12  := or false true;;
let main13  := or true true;;
let main14  := or false false;;
let main15  := suma cero cero;;
let main16  := suma cero uno;;
let main17  := suma uno cero;;
let main18  := suma uno (suc uno);;
let main19  := mult cero cero;;
let main20  := mult cero uno;;
let main21  := mult uno cero;;
let main22  := mult uno uno;;
let main23  := mult (suc (suc uno)) (suc uno);;
let main24  := es_cero cero;;
let main25  := es_cero uno;;
let main26  := es_cero (suc uno);;
let main27  := primero (par cero uno);;
let main28  := segundo (par cero uno);;
let main29  := cons cero uno;;
let main30  := hd main29;;
let main31  := tl main29;;
let main32  := es_nil nil;;
let main33  := es_nil main29;;
let main34  := exp (suc uno) uno;;
let main35  := exp uno (suc uno);;
let main36  := exp (suc uno) (suc uno);;
let main37  := sub cero cero;;
let main38  := sub uno cero;;
let main39  := sub uno uno;;
let main40  := sub (suc (suc (suc uno))) (suc uno);;
